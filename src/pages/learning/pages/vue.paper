<template class='learning-page-view'>
    <ul>
        <li>
            <span @click='doScroll("normal")'>
                常规使用
            </span>
            <ul>
                <li>
                    <span @click='doScroll("normal-environment")'>
                        开发环境搭建
                    </span>
                </li>
                <li>
                    <span @click='doScroll("normal-basic")'>
                        代码结构
                    </span>
                </li>
                <li>
                    <span @click='doScroll("normal-demo")'>
                        举例子
                    </span>
                    <ul>
                        <li>
                            <span @click='doScroll("normal-demo-directive")'>
                                指令
                            </span>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            <span @click='doScroll("webpack")'>
                基于webpack开发
            </span>
        </li>
    </ul>
    <div class="doc-view">
        <h2>
            Vue:一套用于构建用户界面的渐进式框架
        </h2>
        <p class="warn">
            温馨提示：下面的内容是基于Vue2进行测试的，如果有改变会进行说明。
        </p>
        <h3 id='fixed-normal'>
            常规使用
        </h3>
        <h4 id='fixed-normal-environment'>
            开发环境搭建
        </h4>
        <p>
            引入Vue非常简单，只需要在我们的页面引入下面这行代码即可：
        </p>
        <pre q-code='html'>
            <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
        </pre>
        <h4 id='fixed-normal-basic'>
            代码结构
        </h4>
        <pre q-code='html'>
<div id='root'>
    <input type="text" v-bind:value='info'>
</div>
<script>
    window.vm = new Vue({
        el: document.getElementById('root'),
        data: function () {
            return {
                info: "一个简单的例子"
            };
        }
    });
</script>
        </pre>
        <p>
            运行的结果是：在页面出现一个输入框，输入框的内容是
            <span class="warn">"一个简单的例子"</span>
            。
        </p>
        <p>
            其实，Vue框架就是一个对象，通过
            <span class="warn">el配置项</span>
            来确定管理的范围，然后这个范围里面的内容就可以按照
            <span class="warn">Vue的规则</span>
            来开发了。
        </p>
        <p>

        </p>
        <h4 id='fixed-normal-demo'>
            举例子
        </h4>
        <h5 id='fixed-normal-demo-directive'>
            指令
        </h5>
        <p>
            上面我们在Vue对象里面定义的data配置项，通过v-bind和输入框关联起来了，输入框的值会和data中的info值保持一致，这样的一个"东西"我们就称之为
            <span class="important">指令</span>
            。
        </p>
        <p>
            现在，我们把上面的例子HTML部分稍微改造一下：
        </p>
        <pre q-code='html'>
<div id='root'>
    <input type="text" v-bind:value='info'>
    <input type="text" v-bind:value='info'>
</div>
        </pre>
        <p>
            是的，页面出现了两个一模一样的输入框，如果你修改任意一个输入框，另一个输入框的值不会改变，可是，如果你打开控制台执行下面这行代码：
        </p>
        <pre q-code>
            vm.info='控制台修改的数据';
        </pre>
        <p>
            你会发现，两个输入框的值同时变成了
            <span class="warn">
                '控制台修改的数据'
            </span>
            。
        </p>
        <p>
            总结一下就是：数据改变，页面会同步更新，页面改变，数据不会改变。我们称之为
            <span class="important">单向数据绑定</span>
            。
        </p>
        <p>
            既然有单向的，那就可能会有双向的。再次修改一下HTML部分代码：
        </p>
        <pre q-code='html'>
<div id='root'>
    <input type="text" v-model='info'>
    <input type="text" v-bind:value='info'>
</div>
        </pre>
        <p>
            再次运行发现，修改第一个输入框的内容，第二个输入框的内容会跟着改变。也就是：数据改变，页面会同步更新，页面改变，数据也会同步更新。我们称之为
            <span class="important">双向数据绑定</span>
            。
        </p>
        <p>
            上面，我们介绍了指令v-bind和v-model，可以看出来，指令其实就是数据和页面DOM的一个桥梁。通过指令，我们可以在改变数据的时候，间接操作DOM结点。
        </p>
        <p>
            当然，还有更多满足不同需求的指令，你可以
            <a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" class='link'>点击此处</a>
            进行学习。
        </p>
        <h3 id='fixed-webpack'>
            基于webpack开发
        </h3>
        <p>
            在更多的情况下，我们是把页面写在
            <span class="warn">
                vue文件
            </span>
            中，这样的好处是更加灵活、更好复用。vue的设计思想是：由一个个组件拼接成完整的页面，而这一个个组件，其实就是一个个vue文件。
        </p>
        <p>
            首先，需要安装必要的Loader和插件来告诉Webpack如何处理vue文件：
        </p>
        <pre q-code>
            npm install vue-style-loader css-loader vue-loader
        </pre>
        <p>
            然后配置webpack：
        </p>
        <pre q-code>
// webpack.config.js
const VueLoaderPlugin = require('vue-loader').VueLoaderPlugin;
module.exports = {
    entry: ['./index.js'],
    output: {
        path: __dirname,
        filename: 'build.js'
    },
    module: {
        rules: [{
            test: /\.vue$/,
            use: ['vue-loader']
        },
        {
            test: /\.css$/,
            use: ['vue-style-loader', 'css-loader']
        }]
    },
    plugins: [
        new VueLoaderPlugin()
    ]
};
        </pre>
        <p>
            我们想使用Vue肯定也是要安装的：
        </p>
        <pre q-code>
            npm install vue@2
        </pre>
        <p>
            当然，我们还需要新增一个vue文件：
        </p>
        <pre q-code='html'>
<template>
    <div>
        <input type="text" v-model='info'>
        <input type="text" v-bind:value='info'>
    </div>
</template>
<script>
    export default {
        data: function () {
            return {
                info: "一个简单的例子"
            };
        }
    };
</script>
        </pre>
        <p>
            然后，就可以在index.js中使用Vue了：
        </p>
        <pre q-code>
// index.js
import Vue from 'vue';
import App from './App.vue';
new Vue({
    el: document.getElementById('root'),
    render: createElement => createElement(App)
});
        </pre>
        <p>
            完整的代码你可以
            <a href="https://github.com/agile-contrib/vue2" target="_blank" class='link'>点击此处</a>
            进行查看。
        </p>
    </div>
</template>
<script>
    import fixedScroll from '../../../services/fixedScroll.js';
    export default {
        methods: {
            doScroll(fixedName) {
                window.sweethome_noRefresh = true;
                window.location.href = (window.location.href + "").replace(/\?fixed=.*$/, '') + "?fixed=" + fixedName;
                fixedScroll(document.getElementById('root'), 0);
            }
        },
        mounted() {
            fixedScroll(document.getElementById('root'), 0);
        }
    };
</script>
