<template class='doc-view'>
    <h2 id='fixed-top'>
        二、Loader和执行顺序
    </h2>
    <p>
        对于我们用于学习的项目
        <a href="https://github.com/hai2007/quick-paper" target="_blank" class='link'>Quick Paper</a>
        而言，我们是把代码整合到文件.paper中去，文件结构大致如下：
    </p>
    <pre q-code='html'>
<template>
    <!-- 页面的元素在这里 -->
</template>
<script>
    // 逻辑控制代码在这里
    export default {

    };
</script>
<style>
    /* 在这里编辑样式代码 */
</style>
    </pre>
    <p>
        你想，我们使用webpack打包项目的时候，他是不可能认识.paper文件的，当然就无法知道如何解析上面这份文件了，而开发一个loader用以解析上面的文件，就是这里要说明的。
    </p>
    <h3 id='fixed-loader'>
        loader
    </h3>
    <p>
        在说明loader之前，我们先要看看我们编辑的.paper是如何被我们使用的。因为如何使用就决定了我们需要如何解析。
    </p>
    <p>
        和vue类似，先假设我们有一个App.paper文件：
    </p>
    <pre q-code>
import App from './App.paper';
new QuickPaper({
    render:createElement => createElement(App),
    // ...
});
    </pre>
    <p>
        因为render里面只记录了
        <span class="warn">页面内容</span>
        ，可是.paper文件里面可是记录了
        <span class="warn">页面内容</span>
        +
        <span class="warn">逻辑控制</span>
        +
        <span class="warn">页面样式</span>
        的。其余的内容怎么办？
    </p>
    <pre q-code>
// 导入js [逻辑控制]
import script from './${filename}?QuickPaper&type=script&lang=js&hash=${id}&';

// 导入css [页面样式]
import './${filename}?QuickPaper&type=style&lang=css&hash=${id}&';

script.render=${code};

// [页面内容]
export default script;
    </pre>
    <p>
        可以看出来，
        <span class="warn">页面内容</span>
        直接默认导出后给render配置项即可，别的内容因为新增了导入语句，会触发对应的loader进行解析，也就是说，这里其实可以分为两步：
    </p>
    <ul>
        <li>第一步：对于未考虑到的内容执行新的导入语句，触发对应的loader解析</li>
        <li>第二步：导出render需要的内容</li>
    </ul>
    <h3 id='fixed-style-loader'>
        style-loader
    </h3>
    <p>
        比如
        <span class="warn">页面样式</span>
        部分的导入语句：
    </p>
    <pre q-code>
        import './${filename}?QuickPaper&type=style&lang=css&hash=${id}&';
    </pre>
    <p>
        我们是如何让webpack知道这是一个样式文件，并且是使用css还是scss或别的loader来解析的，这属于插件需要说明的部分。在此之前，我们还需要先说明一下样式loader的工作原理。
    </p>
    <h4 id='fixed-style-loader-why'>
        为什么样式loader比较特殊？
    </h4>
    <p>
        根据返回值类型，可以把loader分成两种：一种是返回js代码（也就是一个模块的代码，有类似module.export语句）的loader，一个是不能作为最左边loader的其他loader(比如返回一个CSS字符串)。
    </p>
    <p>
        我们来看看我们webpack里面是如何配置css的loader的：
    </p>
    <pre q-code>
{
    test: /\.css$/,
    loader: ['quick-paper/style-loader/index.js', 'css-loader', 'postcss-loader']
}
    </pre>
    <p>
        这里的重点是css-loader，他属于第一种，返回js代码的loader，对于我们自定义的
        <span class="important">'quick-paper/style-loader/index.js'</span>
        而言，如果让loader按照从右往左的顺序执行，很难拿到真正的css代码。
    </p>
    <h4 id='fixed-style-loader-picth'>
        执行顺序（loader和picth）
    </h4>
    <p>
        在说明如何解决上个问题前，我们需要先说明一下loader的picth和执行顺序。
    </p>
    <p>
        比如上面配置的三个loader而言，执行顺序分为Pitch阶段和Normal阶段（可以理解为loader本身的行为）：
    </p>
    <ul>
        <li>
            <span class="important">Pitch阶段</span>
            ：
            <span class="block">'quick-paper/style-loader/index.js'</span>
            ->
            <span class="block">'css-loader'</span>
            ->
            <span class="block">'postcss-loader'</span>
        </li>
        <li>
            <span class="important">Normal阶段</span>
            ：
            <span class="block">'postcss-loader'</span>
            ->
            <span class="block">'css-loader'</span>
            ->
            <span class="block">'quick-paper/style-loader/index.js'</span>
        </li>
    </ul>
    <p>
        有一个特点是，在
        <span class="important">Pitch阶段</span>
        ，如果某个loader有返回值，就会停止后续执行。
    </p>
    <p class="warn">
        温馨提示：停止执行的意思是，在其右边的loader，包括自己都执行完毕了（Pitch阶段和Normal阶段都结束了），返回的值会返回给前一个loader(Normal阶段)！
    </p>
    <h4 id='fixed-style-loader-how'>
        如何实现？
    </h4>
    <p>
        这里，我们就可以借助给
        <span class="important">'quick-paper/style-loader/index.js'</span>
        设置一个有返回值的Pitch来实现。
    </p>
    <p>
        看看代码结构：
    </p>
    <pre q-code>
// quick-paper/style-loader/index.js

const loaderApi = () => { };
loaderApi.pitch = function (remainingRequest) {

    // request = ""!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/src/in...
    let request = loaderUtils.stringifyRequest(this, '!!' + remainingRequest)

    return `

        // 获取真正的css内容
        var content = require(' + request + ');
        // 然后调用方法添加到页面中生效
        require('./addStylesClient.js')(content);
    `;
};
module.exports = loaderApi;
    </pre>
    <p>
        我们在
        <span class="important">'quick-paper/style-loader/index.js'</span>
        中定义了Picth方法，在此方法里面，返回了一个js字符串，项目运行的时候会运行这段字符串，这段字符串的意义就是调用样式loader获取真正的css后，运行
        <span class="warn">addStylesClient.js</span>
        方法使得在页面生效。
    </p>
    <p class="warn">
        温馨提示：关于addStylesClient.js方法请直接查看项目源码，很容易读懂，给样式添加hash值让scope生效，就是这个方法里。
    </p>
</template>
<script>
    export default {
        mounted() {
            this.changeActive('menu-2', 'loader');
        }
    };
</script>
<style>
    .block {
        background-color: cadetblue;
        color: white;
        padding: 0 10px;
        margin: 0 10px;
    }
</style>
