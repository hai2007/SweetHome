<template class='doc-view'>
    <h2 id='fixed-top'>
        三、插件的作用和一些技巧
    </h2>
    <p>
        我们这里来解释一下，一个.paper文件拆分以后，如何让对应的loader来进行解析。
    </p>
    <h3 id='fixed-time'>
        插件的执行时机
    </h3>
    <p>
        首先需要理解，什么是插件？
    </p>
    <p>
        你可以这样理解：如果说loader帮助webpack获得解析更多类型文件，那插件就是一个打杂工，前者有专门的分工，后者是在特殊情况下帮助，而不是针对某个文件。
    </p>
    <p>
        比如你可以在每次打包前调用一个查看删除上次打包的结果，或者在打包失败的时候重置一些参数，或者是别的一些操作等。
    </p>
    <h3 id='fixed-how'>
        如何实现？
    </h3>
    <p>
        那么，我们这里需要插件干什么？
    </p>
    <p>
        别忘了我们的需求是（拿css举例子），如果遇到：
    </p>
    <pre q-code>
        import './${filename}?QuickPaper&type=style&lang=css&hash=${id}&';
    </pre>
    <p>
        这样的导入语句，我们工具lang=css发现是一个样式文件，应该交给专门解析css的loader处理，当然，我们可以主动修改webpack的配置：
    </p>
    <pre q-code>
{
    test: /type=style&lang=css/,
    loader: ['quick-paper/style-loader/index.js', 'css-loader', 'postcss-loader']
}
    </pre>
    <p>
        可是，为了更简单，我们可以通过插件，在每次打包前对loader配置进行修改（当然，也包括js等相关项），如此，便实现了。
    </p>
</template>
<script>
    import fixedScroll from '../../../services/fixedScroll.js';
    export default {
        mounted() {
            this.changeActive('menu-2', 'plug');
            fixedScroll(document.getElementById('root'), 44);
        }
    };
</script>
