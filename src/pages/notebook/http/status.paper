<template>
    <div class='doc-view'>

        <h2>
            HTTP请求响应码
        </h2>

        <table>
            <thead>
                <tr>
                    <th>响应码</th>
                    <th>解释</th>
                    <th>版本</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>100</td>
                    <td> 初始的请求已经接受，客户应当继续发送请求的其余部分。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>101</td>
                    <td> 服务器将遵从客户的请求转换到另外一种协议。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>200</td>
                    <td> 一切正常，对GET和POST请求的应答文档跟在后面。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>201</td>
                    <td> 服务器已经创建了文档，Location头给出了它的URL。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>202</td>
                    <td> 已经接受请求，但处理尚未完成。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>203</td>
                    <td> 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>204</td>
                    <td> 没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>205</td>
                    <td> 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>206</td>
                    <td> 客户发送了一个带有Range头的GET请求，服务器完成了它。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>300</td>
                    <td> 客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>301</td>
                    <td> 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>302</td>
                    <td> 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved
                        Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求http</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>303</td>
                    <td> 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取。
                    </td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>304</td>
                    <td> 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告
                        诉客户，原来缓冲的文档还可以继续使用。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>305</td>
                    <td> 客户请求的文档应该通过Location头所指明的代理服务器提取。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>307</td>
                    <td> 和302
                        （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP
                        1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>400</td>
                    <td> 请求出现语法错误。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>401</td>
                    <td> 客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填
                        写合适的Authorization头后再次发出请求。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>403</td>
                    <td> 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>404</td>
                    <td> 无法找到指定位置的资源。这也是一个常用的应答。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>405</td>
                    <td> 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>406</td>
                    <td> 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>407</td>
                    <td> 类似于401，表示客户必须先经过代理服务器的授权。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>408</td>
                    <td> 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>409</td>
                    <td> 通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>410</td>
                    <td> 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而
                        404表示由于未知的原因文档不可用。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>411</td>
                    <td> 服务器不能处理请求，除非客户发送一个Content-Length头。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>412</td>
                    <td> 请求头中指定的一些前提条件失败。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>413</td>
                    <td> 目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>414</td>
                    <td> URI太长。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>416</td>
                    <td> 服务器不能满足客户在请求中指定的Range头。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>500</td>
                    <td> 服务器遇到了意料不到的情况，不能完成客户的请求。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>501</td>
                    <td> 服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>502</td>
                    <td> 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>503</td>
                    <td> 服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个
                        Retry-After头。</td>
                    <td>无</td>
                </tr>
                <tr>
                    <td>504</td>
                    <td> 由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。</td>
                    <td>1.1</td>
                </tr>
                <tr>
                    <td>505</td>
                    <td> 服务器不支持请求中所指明的HTTP版本。</td>
                    <td>1.1</td>
                </tr>
            </tbody>
        </table>

    </div>
</template>
