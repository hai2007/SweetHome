(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{56:function(a,p,e){var d=e(57);"string"==typeof d&&(d=[[a.i,d,""]]),d.locals&&(a.exports=d.locals);(0,e(1).default)("data-quickpaper-6d3af3f3",d,!0)},57:function(a,p,e){(a.exports=e(0)(!1)).push([a.i,"",""])},80:function(a,p,e){"use strict";e.r(p);var d={mounted:function(){this.changeActive("menu-2","plug")}};e(56);d.render=function(a){return a("div",{class:"doc-view",quickpaper:"","data-quickpaper-6d3af3f3":""},[a("h2",{"data-quickpaper-6d3af3f3":""},["插件的作用和一些技巧"]),a("p",{"data-quickpaper-6d3af3f3":""},["我们这里来解释一下，一个.paper文件拆分以后，如何让对应的loader来进行解析。"]),a("h3",{"data-quickpaper-6d3af3f3":""},["插件的执行时机"]),a("p",{"data-quickpaper-6d3af3f3":""},["首先需要理解，什么是插件？"]),a("p",{"data-quickpaper-6d3af3f3":""},["你可以这样理解：如果说loader帮助webpack获得解析更多类型文件，那插件就是一个打杂工，前者有专门的分工，后者是在特殊情况下帮助，而不是针对某个文件。"]),a("p",{"data-quickpaper-6d3af3f3":""},["比如你可以在每次打包前调用一个查看删除上次打包的结果，或者在打包失败的时候重置一些参数，或者是别的一些操作等。"]),a("h3",{"data-quickpaper-6d3af3f3":""},["如何实现？"]),a("p",{"data-quickpaper-6d3af3f3":""},["那么，我们这里需要插件干什么？"]),a("p",{"data-quickpaper-6d3af3f3":""},["别忘了我们的需求是（拿css举例子），如果遇到："]),a("pre",{"q-code":"","data-quickpaper-6d3af3f3":""},["import './${filename}?QuickPaper&type=style&lang=css&hash=${id}&';"]),a("p",{"data-quickpaper-6d3af3f3":""},["这样的导入语句，我们工具lang=css发现是一个样式文件，应该交给专门解析css的loader处理，当然，我们可以主动修改webpack的配置："]),a("pre",{"q-code":"","data-quickpaper-6d3af3f3":""},["{↵    test: /type=style&lang=css/,↵    loader: ['quick-paper/style-loader/index.js', 'css-loader', 'postcss-loader']↵}"]),a("p",{"data-quickpaper-6d3af3f3":""},["可是，为了更简单，我们可以通过插件，在每次打包前对loader配置进行修改（当然，也包括js等相关项），如此，便实现了。"])])};p.default=d}}]);